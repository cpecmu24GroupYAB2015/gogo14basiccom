to main
reset_all

show_binarygogo 1
forever[
;----------------------------
    if(menu_ = 0)[
        if(not (press_btn sensor7))[show "selc"]
        if(in_ sensor7 570 580)[
            show "c 14" wait 2
            set menu_ 14
        ]
        if(in_ sensor7 450 460)[
            show "c 24" wait 2
        ]
        if(in_ sensor7 320 340)[
            show "c 34" wait 2
        ]
        if(in_ sensor7 138 152)[
            show "c  4" wait 2
        ]
        if(in_ sensor7 530 540)[
            show "c  1" wait 2
            show "Easy" wait 10
            show "redy" wait 30
            beep
            set menu_ 1
        ]
        if(in_ sensor7 400 410)[
            show "c  2" wait 2
            set menu_ 2
        ]
        if(in_ sensor7 250 260)[
            show "c  3" wait 2
            set menu_ 3
        ]
    ]
;----------------------------
    if(menu_ = 14)[
        show "rrrr"
        wait 1
        time_ 5
    ]
    if(menu_ = 1)[
        problem 50
        your_score
        set menu_ 0
    ]
    if(menu_ = 2)[
        problem 20
        your_score
        set menu_ 0
    ]
    if(menu_ = 3)[
        problem 25
        your_score
        set menu_ 0
    ]
]
end

;---------------model---------------
to press_btn :port_
    if(port_ > 20)[output 1]
    output 0
end

to reset_all
    abcd, off ccw
    set menu_ 0
    set score 0
    reset_ans
    set count 0
    set qcount 0
end

to wining :num
    repeat num[lampon 4 wait 2 lampoff 4]
end

to reset_ans
    set ans 0
    set p1 0
    set p2 0
    set p3 0
    set p4 0
    set p5 0
    set p6 0
end

to problem :num
set qcount 0
set qcount num
repeat num[
    beep
    show "nQ"
    wait 10
    show qcount
    wait 10
    show "see"
    wait 15
    set p1 cal_
    set p2 cal_
    set p3 cal_
    set p4 cal_
    set p5 cal_
    set p6 cal_
    lampon 3
    seem (sum_ p6 p5 p4 p3 p2 p1) 10

    wait 5
    show "redy"
    wait 15     
    rbeep 30
    time_ 5
    lampoff 3
    ifelse ((sum_ 0 0 0 0 0 (press_btn sensor8)) = (sum_ 0 0 0 0 0 1))[
        set score score+1
        show "corr"
        wait 10
    ][show "inco" wait 10]
    show "out"
    rbeep 60
    set qcount (qcount-1)
    wait 10
    ]
end

;---------------view----------------
to show_binarygogo :delay
 show "    " wait delay beep show "   b" wait delay beep show "  bi" wait delay beep show " bir" wait delay beep show "bira" wait delay show "irar" wait delay show "rary" wait delay show "ary " wait delay show "ry g" wait delay show "y go" wait delay show " gog" wait delay show "gogo" wait delay show "ogo " wait delay show "go  " wait delay show "o   " wait delay show "   " wait delay+2 beep show "biry" wait delay show "   " wait delay+2 beep show "gogo" wait delay show "" wait 3 show "b019" wait 5 show "selc" rbeep 20

end

to your_score
show "   U" wait 3 show "  U " wait 3 show " U S" wait 3 show "U sc" wait 3 show " scr" wait 3 show "scro" wait 3 show "cror" wait 3 show "rore" wait 3 show "ore " wait 3 show "re  " wait 3 show "e  " wait 3 show "    " wait 3 show "is" wait 8 beep show score wait 20 rbeep 20
end
;+------------ Time -----------+
to time_ :sec
    set count 0
    set count sec
    repeat (sec)[
        wait 1
        show count
        if(press_btn sensor7)[stop]
        ifelse(count > 0)[
            if(count < 11)[beep]
            set count (count-1)
            wait 10
        ][
        rbeep 30 wait 10
        ]
    ]
end

;------------controller-------------
to cal_
    output ((random 1) % 2)
end

to sum_ :p6 :p5 :p4 :p3 :p2 :p1
    output p6*1+p5*2+p4*4+p3*8+p2*16+p1*32
end

to in_ :value_ :max_ :min_
    if((value_ < 10) or (value_ > max_ +1000))[ output 0 ]
    if((value_ > min_ - 10 ) and (value_ < max_ +10 ))[ output 1]
    output 0
end

to rbeep :num
    repeat num[beep]
end

to seem :p :sec
    set count 0
    set count sec
    repeat (sec)[
        ifelse(count < 6)[
            repeat 2[beep show p wait 5 beep show "    " wait 5]
        ][
            show p set count (count-1) wait 10
        ]

    ]set count 0
end

to lampon :num
    if(num = 1)[a, on]
    if(num = 2)[b, on]
    if(num = 3)[c, on]
    if(num = 4)[d, on]
end

to lampoff :num
    if(num = 1)[a, off]
    if(num = 2)[b, off]
    if(num = 3)[c, off]
    if(num = 4)[d, off]
end

to readans :pe1 :pe2 :pe3 :pe4 :pe5
    ifelse(in_ pe1 466 471)[set p1 1][set p1 0]
    ifelse(in_ pe2 466 471)[set p1 1][set p1 0]
    ifelse(in_ pe3 466 471)[set p1 1][set p1 0]
    ifelse(in_ pe4 466 471)[set p1 1][set p1 0]
    ifelse(in_ pe5 466 471)[set p1 1][set p1 0]
    ifelse(in_ pe6 466 471)[set p1 1][set p1 0]
    output sum_ p1 p2 p3 p4 p5 p6
end